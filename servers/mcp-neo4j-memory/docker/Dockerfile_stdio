# Optimized Dockerfile for STDIO protocol using Alpine Linux
# Significantly reduced image size compared to Debian-based version

# ============================================================================
# BUILD STAGE - Shared across all protocol variants
# ============================================================================
FROM python:3.11-alpine as builder

# Set working directory
WORKDIR /app

# Copy dependency files first for better layer caching
COPY pyproject.toml uv.lock* ./

# Copy README.md as it's referenced in pyproject.toml
COPY README.md ./

# Copy source code
COPY src/ ./src/

# Install build dependencies, build everything, then remove build deps in one layer
RUN apk add --no-cache --virtual .build-deps build-base && \
    pip install --no-cache-dir uv && \
    (uv sync --frozen --no-dev || pip install --no-cache-dir -e .) && \
    pip install --no-cache-dir -e . && \
    apk del .build-deps

# ============================================================================
# RUNTIME BASE - Shared runtime configuration
# ============================================================================
FROM python:3.11-alpine as runtime-base

# Create non-root user for security (Alpine style)
RUN addgroup -S mcp && adduser -S -G mcp mcp

# Set working directory
WORKDIR /app

# Copy installed packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin/mcp-neo4j-memory /usr/local/bin/
COPY --from=builder /app/src /app/src
COPY --from=builder /app/README.md /app/

# Create directory for potential data persistence
RUN mkdir -p /app/data && chown -R mcp:mcp /app

# Switch to non-root user
USER mcp

# Common environment variables
ENV NEO4J_URL="bolt://host.docker.internal:7687"
ENV NEO4J_USERNAME="neo4j"
ENV NEO4J_PASSWORD="password"
ENV NEO4J_DATABASE="neo4j"

# ============================================================================
# STDIO VARIANT - Default MCP protocol
# ============================================================================
FROM runtime-base as stdio

# stdio-specific environment
ENV MCP_MODE="stdio"

# Health check for stdio mode (check package import)
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD python -c "import mcp_neo4j_memory; print('OK')" || exit 1

# stdio command
CMD ["sh", "-c", "mcp-neo4j-memory --mode ${MCP_MODE} --db-url ${NEO4J_URL} --username ${NEO4J_USERNAME} --password ${NEO4J_PASSWORD} --database ${NEO4J_DATABASE}"]

# Labels for stdio
LABEL maintainer="MCP Neo4j Memory"
LABEL description="stdio-only MCP server for Neo4j knowledge graph memory"
LABEL protocol="stdio"
LABEL variant="stdio"
