"""
These are the models that make up the data model structure generated by the Aura Data Import console tool.
"""

from typing import List, Literal, Optional, TypedDict

AuraDataImportSupportedTypes = Literal[
    "string", "integer", "float", "boolean"
]  # supported types in Aura Data Import

Position = TypedDict(
    "Position",
    {
        "x": float,
        "y": float,
    },
)


AuraDataImportVisualisationNode = TypedDict(
    "AuraDataImportVisualisationNode",
    {
        "id": str,
        "position": Position,
    },
)


# Property and Type Definitions
PropertyType = TypedDict(
    "PropertyType",
    {
        "type": AuraDataImportSupportedTypes,
    },
)


Property = TypedDict(
    "Property",
    {
        "$id": str,
        "token": str,
        "type": PropertyType,
        "nullable": bool,
    },
)


# Node and Relationship Schema Types
NodeLabel = TypedDict(
    "NodeLabel",
    {
        "$id": str,
        "token": str,
        "properties": List[Property],
    },
)


RelationshipType = TypedDict(
    "RelationshipType",
    {
        "$id": str,
        "token": str,
        "properties": List[Property],
    },
)


LabelRef = TypedDict(
    "LabelRef",
    {
        "$ref": str,
    },
)


NodeObjectType = TypedDict(
    "NodeObjectType",
    {
        "$id": str,
        "labels": List[LabelRef],
    },
)


TypeRef = TypedDict(
    "TypeRef",
    {
        "$ref": str,
    },
)


NodeRef = TypedDict(
    "NodeRef",
    {
        "$ref": str,
    },
)


RelationshipObjectType = TypedDict(
    "RelationshipObjectType",
    {
        "$id": str,
        "type": TypeRef,
        "from": NodeRef,
        "to": NodeRef,
    },
)


PropertyRef = TypedDict(
    "PropertyRef",
    {
        "$ref": str,
    },
)


# Constraint and Index Types
Constraint = TypedDict(
    "Constraint",
    {
        "$id": str,
        "name": str,
        "constraintType": Literal["uniqueness", "existence", "node_key"],
        "entityType": Literal["node", "relationship"],
        "nodeLabel": Optional[LabelRef],
        "relationshipType": Optional[TypeRef],
        "properties": List[PropertyRef],
    },
)


Index = TypedDict(
    "Index",
    {
        "$id": str,
        "name": str,
        "indexType": str,
        "entityType": Literal["node", "relationship"],
        "nodeLabel": Optional[LabelRef],
        "relationshipType": Optional[TypeRef],
        "properties": List[PropertyRef],
    },
)


# Graph Schema Types
GraphSchema = TypedDict(
    "GraphSchema",
    {
        "nodeLabels": List[NodeLabel],
        "relationshipTypes": List[RelationshipType],
        "nodeObjectTypes": List[NodeObjectType],
        "relationshipObjectTypes": List[RelationshipObjectType],
        "constraints": List[Constraint],
        "indexes": List[Index],
    },
)


GraphSchemaRepresentation = TypedDict(
    "GraphSchemaRepresentation",
    {
        "version": str,
        "graphSchema": GraphSchema,
    },
)


# Graph Schema Extensions
NodeKeyProperty = TypedDict(
    "NodeKeyProperty",
    {
        "node": NodeRef,
        "keyProperty": PropertyRef,
    },
)


GraphSchemaExtensionsRepresentation = TypedDict(
    "GraphSchemaExtensionsRepresentation",
    {
        "nodeKeyProperties": List[NodeKeyProperty],
    },
)


# Data Source Schema Types
RecommendedType = TypedDict(
    "RecommendedType",
    {
        "type": AuraDataImportSupportedTypes,
    },
)


Field = TypedDict(
    "Field",
    {
        "name": str,
        "sample": str,
        "recommendedType": RecommendedType,
    },
)


TableSchema = TypedDict(
    "TableSchema",
    {
        "name": str,
        "fields": List[Field],
    },
)


DataSourceSchema = TypedDict(
    "DataSourceSchema",
    {
        "type": Literal["local", "remote"],
        "tableSchemas": List[TableSchema],
    },
)


# Mapping Types
PropertyMapping = TypedDict(
    "PropertyMapping",
    {
        "property": PropertyRef,
        "fieldName": str,
    },
)


NodeMapping = TypedDict(
    "NodeMapping",
    {
        "node": NodeRef,
        "tableName": str,
        "propertyMappings": List[PropertyMapping],
    },
)


FieldMapping = TypedDict(
    "FieldMapping",
    {
        "fieldName": str,
    },
)


RelationshipMapping = TypedDict(
    "RelationshipMapping",
    {
        "relationship": NodeRef,
        "tableName": str,
        "propertyMappings": List[PropertyMapping],
        "fromMapping": FieldMapping,
        "toMapping": FieldMapping,
    },
)


GraphMappingRepresentation = TypedDict(
    "GraphMappingRepresentation",
    {
        "dataSourceSchema": DataSourceSchema,
        "nodeMappings": List[NodeMapping],
        "relationshipMappings": List[RelationshipMapping],
    },
)


# Configuration Types
Configurations = TypedDict(
    "Configurations",
    {
        "idsToIgnore": List[str],
    },
)


# Main Data Model Types
DataModelContent = TypedDict(
    "DataModelContent",
    {
        "version": str,
        "graphSchemaRepresentation": GraphSchemaRepresentation,
        "graphSchemaExtensionsRepresentation": GraphSchemaExtensionsRepresentation,
        "graphMappingRepresentation": GraphMappingRepresentation,
        "configurations": Configurations,
    },
)


Visualisation = TypedDict(
    "Visualisation",
    {
        "nodes": List[AuraDataImportVisualisationNode],
    },
)


AuraDataImportDataModel = TypedDict(
    "AuraDataImportDataModel",
    {
        "version": str,
        "visualisation": Visualisation,
        "dataModel": DataModelContent,
    },
)
